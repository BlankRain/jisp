; Turns a string into a flat array of tokens, split by delimiters and whitespace

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Dependencies ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Regexes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(= tokens    `()  ;#`
   recode    /^[^]*?(?=;.*[\n\r]?|""|"[^]*?(?:[^\\]")|''|'[^]*?(?:[^\\]')|\/[^\s]+\/[\w]*)/
             ;# ^ matches until first comment, '-string, "-string, or regex
   recomment /^;.*[\n\r]?/                     ; first comment
   redstring /^""|^"[^]*?(?:[^\\]")[^\s):\]\}]*/   ; first " string + data until delimiter
   resstring /^''|^'[^]*?(?:[^\\]')[^\s):\]\}]*/   ; first ' string + data until delimiter
   rereg     /^\/[^\s]+\/[\w]*[^\s)]*/)        ; first regex + data until delimiter

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Utilities ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def grate str
     (do str
         (.replace /;.*$/gm     "")             ; drop comments if any
         (.replace /\{/g        "(fn (")        ; desugar lambdas
         (.replace /\}/g        "))")           ; desugar lambdas
         (.replace /\(/g        " ( ")
         (.replace /\)/g        " ) ")
         (.replace /\[$/g       " [ ")
         (.replace /\['/g       " [ '")
         (.replace /\["/g       ' [ "')
         (.replace /'\]/g       "' ] ")
         (.replace /"\]/g       '" ] ')
         (.replace /\[[\s]*\(/g " [ ( ")
         (.replace /\)[\s]*\]/g " ) ] ")
         (.replace /:/g         " : ")
         (.replace /`/g         " ` ")
         (.replace /,/g         " , ")
         (.replace /\.\.\./g    " ... ")
         (.replace /…/g         " … ")
         (.trim)
         (.split /\s+/)))

(def concatNewLines str (str.replace /\n|\n\r/g "\\n"))

(def match str re
     (if (and (= mask (str.match re))
              (> (get mask[0] length) 0))
         mask[0]
         null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Tokeniser ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def tokenise str
     (do (= tokens `())
         (while (> (get (= str (str.trim)) length) 0)
                (if (= mask          (match str recode))
                    (do (tokens.push …(grate mask))
                        (= str       (str.replace recode "")))
                    (elif (= mask    (match str recomment))
                          (= str     (str.replace recomment "")))
                    (elif (= mask    (match str redstring))
                          (do (tokens.push (concatNewLines mask))
                              (= str (str.replace redstring ""))))
                    (elif (= mask    (match str resstring))
                          (do (tokens.push (concatNewLines mask))
                              (= str (str.replace resstring ""))))
                    (elif (= mask    (match str rereg))
                          (do (tokens.push mask)
                              (= str (str.replace rereg ""))))
                    (do (tokens.push …(grate str))
                        (= str ""))))
         (tokens.filter (fn x (and (? x) (isnt x "" undefined null))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Export ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(= module.exports tokenise)
