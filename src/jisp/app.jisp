; for shorter component declaration
(mac ngFn ...deps code
  (if (> deps.length 0)
      ``(,...(for dep deps (JSON.stringify dep))
          `,(fn ,...deps ,code))
        `,(fn ,...deps ,code)))

(angular.module "jispApp"
  `("ngAnimate"
    "mgcrea.ngStrap"
    "jispApp.controller"))

; disable angular # routing to enable native browser anchoring
(.config (ngFn $provide
  ($provide.decorator "$browser" (ngFn $delegate (do
    (= $delegate.onUrlChange {}
       $delegate.url (fn ""))
    $delegate)))))

(.directive "isolatedCode" (ngFn
  (priority: 1020
   restrict: "A"
   scope:    true
   ; init values for use in inner scopes
   controller: (ngFn $scope
    (= $scope.code      (:)
       $scope.fn        (:)
       $scope.fn.evalJS {})))))

(.directive "modelInit" (ngFn $compile
; same as ngModel but assigns the initial text of the element to the corresponding model
  (restrict: "A"
   priority: 1010
   link: (fn scope elem attrs (do
    (= scope.code.example (do (elem.text) (.trim)))
    (elem.attr "ng-model" "code.example")
    (elem.removeAttr "model-init")
    (($compile elem) scope)
    (scope.$watch "code.example" (fn input
      (= res (jispCompile input)
         scope.code.compiled (any res.message res)
         scope.code.isError  (instanceof res Error))))
    (= scope.fn.evalJS (fn (do
      (= res "")
      ; redirect console.log for eval output
      (= consoleLog  console.log
         console.log (fn ...str
                       (do (for s str (+= res s " "))
                           (= res (init res))
                           (+= res "\n"))))
      ; recompile src, wrapping it into (prn (do ... )) for logging
      (= src (+ "(prn (do " scope.code.example "\n))"))
      (= compiled (jispCompile src))
      ; run and log result
      (try (eval compiled)
        (catch err (console.log err.message)))
      (= scope.code.evalOutput res)
      ; restore console.log
      (= console.log consoleLog)
      ; toggle output panel
      (= scope.code.showEvalOutput true)))))))))

; # Util

(def jispCompile src
  (if (and (? src) (> src.length 0))
      (try (js_beautify
             (jisp.compile (do ($ "<div/>") (.html src) (.text))
               ; ^ decode things like &gt; encoded by Jade
               (wrap: no))
             (indent_size: 2))
        (catch err err))
      ""))
